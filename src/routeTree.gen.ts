/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as Layout2Import } from './routes/_layout2';
import { Route as Layout1Import } from './routes/_layout1';
import { Route as IndexImport } from './routes/index';
import { Route as HomeIndexImport } from './routes/home/index';
import { Route as Layout1EngagementIndexImport } from './routes/_layout1/engagement/index';
import { Route as Layout2EngagementEngagementIdIndexImport } from './routes/_layout2/engagement/$engagementId/index';

// Create/Update Routes

const Layout2Route = Layout2Import.update({
  id: '/_layout2',
  getParentRoute: () => rootRoute,
} as any);

const Layout1Route = Layout1Import.update({
  id: '/_layout1',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any);

const Layout1EngagementIndexRoute = Layout1EngagementIndexImport.update({
  id: '/engagement/',
  path: '/engagement/',
  getParentRoute: () => Layout1Route,
} as any);

const Layout2EngagementEngagementIdIndexRoute =
  Layout2EngagementEngagementIdIndexImport.update({
    id: '/engagement/$engagementId/',
    path: '/engagement/$engagementId/',
    getParentRoute: () => Layout2Route,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_layout1': {
      id: '/_layout1';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof Layout1Import;
      parentRoute: typeof rootRoute;
    };
    '/_layout2': {
      id: '/_layout2';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof Layout2Import;
      parentRoute: typeof rootRoute;
    };
    '/home/': {
      id: '/home/';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_layout1/engagement/': {
      id: '/_layout1/engagement/';
      path: '/engagement';
      fullPath: '/engagement';
      preLoaderRoute: typeof Layout1EngagementIndexImport;
      parentRoute: typeof Layout1Import;
    };
    '/_layout2/engagement/$engagementId/': {
      id: '/_layout2/engagement/$engagementId/';
      path: '/engagement/$engagementId';
      fullPath: '/engagement/$engagementId';
      preLoaderRoute: typeof Layout2EngagementEngagementIdIndexImport;
      parentRoute: typeof Layout2Import;
    };
  }
}

// Create and export the route tree

interface Layout1RouteChildren {
  Layout1EngagementIndexRoute: typeof Layout1EngagementIndexRoute;
}

const Layout1RouteChildren: Layout1RouteChildren = {
  Layout1EngagementIndexRoute: Layout1EngagementIndexRoute,
};

const Layout1RouteWithChildren =
  Layout1Route._addFileChildren(Layout1RouteChildren);

interface Layout2RouteChildren {
  Layout2EngagementEngagementIdIndexRoute: typeof Layout2EngagementEngagementIdIndexRoute;
}

const Layout2RouteChildren: Layout2RouteChildren = {
  Layout2EngagementEngagementIdIndexRoute:
    Layout2EngagementEngagementIdIndexRoute,
};

const Layout2RouteWithChildren =
  Layout2Route._addFileChildren(Layout2RouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof Layout2RouteWithChildren;
  '/home': typeof HomeIndexRoute;
  '/engagement': typeof Layout1EngagementIndexRoute;
  '/engagement/$engagementId': typeof Layout2EngagementEngagementIdIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof Layout2RouteWithChildren;
  '/home': typeof HomeIndexRoute;
  '/engagement': typeof Layout1EngagementIndexRoute;
  '/engagement/$engagementId': typeof Layout2EngagementEngagementIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_layout1': typeof Layout1RouteWithChildren;
  '/_layout2': typeof Layout2RouteWithChildren;
  '/home/': typeof HomeIndexRoute;
  '/_layout1/engagement/': typeof Layout1EngagementIndexRoute;
  '/_layout2/engagement/$engagementId/': typeof Layout2EngagementEngagementIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '' | '/home' | '/engagement' | '/engagement/$engagementId';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '' | '/home' | '/engagement' | '/engagement/$engagementId';
  id:
    | '__root__'
    | '/'
    | '/_layout1'
    | '/_layout2'
    | '/home/'
    | '/_layout1/engagement/'
    | '/_layout2/engagement/$engagementId/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  Layout1Route: typeof Layout1RouteWithChildren;
  Layout2Route: typeof Layout2RouteWithChildren;
  HomeIndexRoute: typeof HomeIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Layout1Route: Layout1RouteWithChildren,
  Layout2Route: Layout2RouteWithChildren,
  HomeIndexRoute: HomeIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout1",
        "/_layout2",
        "/home/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout1": {
      "filePath": "_layout1.tsx",
      "children": [
        "/_layout1/engagement/"
      ]
    },
    "/_layout2": {
      "filePath": "_layout2.tsx",
      "children": [
        "/_layout2/engagement/$engagementId/"
      ]
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/_layout1/engagement/": {
      "filePath": "_layout1/engagement/index.tsx",
      "parent": "/_layout1"
    },
    "/_layout2/engagement/$engagementId/": {
      "filePath": "_layout2/engagement/$engagementId/index.tsx",
      "parent": "/_layout2"
    }
  }
}
ROUTE_MANIFEST_END */
