/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as EngagementLayoutImport } from './routes/_engagementLayout';
import { Route as DashboardLayoutImport } from './routes/_dashboardLayout';
import { Route as DashboardLayoutIndexImport } from './routes/_dashboardLayout/index';
import { Route as DashboardLayoutSettingsIndexImport } from './routes/_dashboardLayout/settings/index';
import { Route as DashboardLayoutEngagementsIndexImport } from './routes/_dashboardLayout/engagements/index';
import { Route as EngagementLayoutEngagementsEngagementIdIndexImport } from './routes/_engagementLayout/engagements/$engagementId/index';
import { Route as EngagementLayoutEngagementsEngagementIdEntityIdIndexImport } from './routes/_engagementLayout/engagements/$engagementId/$entityId/index';

// Create/Update Routes

const EngagementLayoutRoute = EngagementLayoutImport.update({
  id: '/_engagementLayout',
  getParentRoute: () => rootRoute,
} as any);

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/_dashboardLayout',
  getParentRoute: () => rootRoute,
} as any);

const DashboardLayoutIndexRoute = DashboardLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardLayoutRoute,
} as any);

const DashboardLayoutSettingsIndexRoute =
  DashboardLayoutSettingsIndexImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => DashboardLayoutRoute,
  } as any);

const DashboardLayoutEngagementsIndexRoute =
  DashboardLayoutEngagementsIndexImport.update({
    id: '/engagements/',
    path: '/engagements/',
    getParentRoute: () => DashboardLayoutRoute,
  } as any);

const EngagementLayoutEngagementsEngagementIdIndexRoute =
  EngagementLayoutEngagementsEngagementIdIndexImport.update({
    id: '/engagements/$engagementId/',
    path: '/engagements/$engagementId/',
    getParentRoute: () => EngagementLayoutRoute,
  } as any);

const EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute =
  EngagementLayoutEngagementsEngagementIdEntityIdIndexImport.update({
    id: '/engagements/$engagementId/$entityId/',
    path: '/engagements/$engagementId/$entityId/',
    getParentRoute: () => EngagementLayoutRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboardLayout': {
      id: '/_dashboardLayout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof DashboardLayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/_engagementLayout': {
      id: '/_engagementLayout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof EngagementLayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/_dashboardLayout/': {
      id: '/_dashboardLayout/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof DashboardLayoutIndexImport;
      parentRoute: typeof DashboardLayoutImport;
    };
    '/_dashboardLayout/engagements/': {
      id: '/_dashboardLayout/engagements/';
      path: '/engagements';
      fullPath: '/engagements';
      preLoaderRoute: typeof DashboardLayoutEngagementsIndexImport;
      parentRoute: typeof DashboardLayoutImport;
    };
    '/_dashboardLayout/settings/': {
      id: '/_dashboardLayout/settings/';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof DashboardLayoutSettingsIndexImport;
      parentRoute: typeof DashboardLayoutImport;
    };
    '/_engagementLayout/engagements/$engagementId/': {
      id: '/_engagementLayout/engagements/$engagementId/';
      path: '/engagements/$engagementId';
      fullPath: '/engagements/$engagementId';
      preLoaderRoute: typeof EngagementLayoutEngagementsEngagementIdIndexImport;
      parentRoute: typeof EngagementLayoutImport;
    };
    '/_engagementLayout/engagements/$engagementId/$entityId/': {
      id: '/_engagementLayout/engagements/$engagementId/$entityId/';
      path: '/engagements/$engagementId/$entityId';
      fullPath: '/engagements/$engagementId/$entityId';
      preLoaderRoute: typeof EngagementLayoutEngagementsEngagementIdEntityIdIndexImport;
      parentRoute: typeof EngagementLayoutImport;
    };
  }
}

// Create and export the route tree

interface DashboardLayoutRouteChildren {
  DashboardLayoutIndexRoute: typeof DashboardLayoutIndexRoute;
  DashboardLayoutEngagementsIndexRoute: typeof DashboardLayoutEngagementsIndexRoute;
  DashboardLayoutSettingsIndexRoute: typeof DashboardLayoutSettingsIndexRoute;
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardLayoutIndexRoute: DashboardLayoutIndexRoute,
  DashboardLayoutEngagementsIndexRoute: DashboardLayoutEngagementsIndexRoute,
  DashboardLayoutSettingsIndexRoute: DashboardLayoutSettingsIndexRoute,
};

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
);

interface EngagementLayoutRouteChildren {
  EngagementLayoutEngagementsEngagementIdIndexRoute: typeof EngagementLayoutEngagementsEngagementIdIndexRoute;
  EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute: typeof EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute;
}

const EngagementLayoutRouteChildren: EngagementLayoutRouteChildren = {
  EngagementLayoutEngagementsEngagementIdIndexRoute:
    EngagementLayoutEngagementsEngagementIdIndexRoute,
  EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute:
    EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute,
};

const EngagementLayoutRouteWithChildren =
  EngagementLayoutRoute._addFileChildren(EngagementLayoutRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof EngagementLayoutRouteWithChildren;
  '/': typeof DashboardLayoutIndexRoute;
  '/engagements': typeof DashboardLayoutEngagementsIndexRoute;
  '/settings': typeof DashboardLayoutSettingsIndexRoute;
  '/engagements/$engagementId': typeof EngagementLayoutEngagementsEngagementIdIndexRoute;
  '/engagements/$engagementId/$entityId': typeof EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute;
}

export interface FileRoutesByTo {
  '': typeof EngagementLayoutRouteWithChildren;
  '/': typeof DashboardLayoutIndexRoute;
  '/engagements': typeof DashboardLayoutEngagementsIndexRoute;
  '/settings': typeof DashboardLayoutSettingsIndexRoute;
  '/engagements/$engagementId': typeof EngagementLayoutEngagementsEngagementIdIndexRoute;
  '/engagements/$engagementId/$entityId': typeof EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_dashboardLayout': typeof DashboardLayoutRouteWithChildren;
  '/_engagementLayout': typeof EngagementLayoutRouteWithChildren;
  '/_dashboardLayout/': typeof DashboardLayoutIndexRoute;
  '/_dashboardLayout/engagements/': typeof DashboardLayoutEngagementsIndexRoute;
  '/_dashboardLayout/settings/': typeof DashboardLayoutSettingsIndexRoute;
  '/_engagementLayout/engagements/$engagementId/': typeof EngagementLayoutEngagementsEngagementIdIndexRoute;
  '/_engagementLayout/engagements/$engagementId/$entityId/': typeof EngagementLayoutEngagementsEngagementIdEntityIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ''
    | '/'
    | '/engagements'
    | '/settings'
    | '/engagements/$engagementId'
    | '/engagements/$engagementId/$entityId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | ''
    | '/'
    | '/engagements'
    | '/settings'
    | '/engagements/$engagementId'
    | '/engagements/$engagementId/$entityId';
  id:
    | '__root__'
    | '/_dashboardLayout'
    | '/_engagementLayout'
    | '/_dashboardLayout/'
    | '/_dashboardLayout/engagements/'
    | '/_dashboardLayout/settings/'
    | '/_engagementLayout/engagements/$engagementId/'
    | '/_engagementLayout/engagements/$engagementId/$entityId/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren;
  EngagementLayoutRoute: typeof EngagementLayoutRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
  EngagementLayoutRoute: EngagementLayoutRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboardLayout",
        "/_engagementLayout"
      ]
    },
    "/_dashboardLayout": {
      "filePath": "_dashboardLayout.tsx",
      "children": [
        "/_dashboardLayout/",
        "/_dashboardLayout/engagements/",
        "/_dashboardLayout/settings/"
      ]
    },
    "/_engagementLayout": {
      "filePath": "_engagementLayout.tsx",
      "children": [
        "/_engagementLayout/engagements/$engagementId/",
        "/_engagementLayout/engagements/$engagementId/$entityId/"
      ]
    },
    "/_dashboardLayout/": {
      "filePath": "_dashboardLayout/index.tsx",
      "parent": "/_dashboardLayout"
    },
    "/_dashboardLayout/engagements/": {
      "filePath": "_dashboardLayout/engagements/index.tsx",
      "parent": "/_dashboardLayout"
    },
    "/_dashboardLayout/settings/": {
      "filePath": "_dashboardLayout/settings/index.tsx",
      "parent": "/_dashboardLayout"
    },
    "/_engagementLayout/engagements/$engagementId/": {
      "filePath": "_engagementLayout/engagements/$engagementId/index.tsx",
      "parent": "/_engagementLayout"
    },
    "/_engagementLayout/engagements/$engagementId/$entityId/": {
      "filePath": "_engagementLayout/engagements/$engagementId/$entityId/index.tsx",
      "parent": "/_engagementLayout"
    }
  }
}
ROUTE_MANIFEST_END */
